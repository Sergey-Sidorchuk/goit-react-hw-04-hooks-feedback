{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","map","option","type","className","styles","button","onClick","Statistics","good","bad","neutral","total","positivePercentage","defaultProps","Notification","message","style","title","App","useState","setGood","setNeutral","setBad","countTotalFeedback","event","target","name","prevState","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,QAAU,4BAA4B,IAAM,0B,mBCA9FD,EAAOC,QAAU,CAAC,OAAS,gCAAgC,KAAO,4DAA4D,QAAU,+DAA+D,IAAM,6D,gBCA7MD,EAAOC,QAAU,CAAC,MAAQ,8B,+JCqBXC,EAhBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAAmC,qCACtDD,EAAQE,KAAI,SAAAC,GAAM,OACf,wBAAQC,KAAK,SAETC,UAAWC,IAAOC,OAClBC,QAAS,kBAAMP,EAAgBE,IAHnC,SAIKA,GAHIA,MAH0C,Q,gBCFrDM,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,oBAAGT,UAAWC,IAAOI,KAArB,mBAAkCA,KAClC,oBAAGL,UAAWC,IAAOM,QAArB,sBAAwCA,KACxC,oBAAGP,UAAWC,IAAOK,IAArB,kBAAgCA,KAEpB,IAAVE,EACF,qCACI,iDAAoBA,KACpB,oBAAGR,UAAWC,IAAOI,KAArB,iCAAgDI,EAAhD,OACA,8CACE,wBAKlBL,EAAWM,aAAe,CACtBF,MAAO,KACPC,mBAAoB,MAYTL,Q,gBCvBAO,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,oBAAIZ,UAAWa,IAAMC,MAArB,SAA6BF,KCKlB,SAASG,IACxB,MAAwBC,mBAAS,GAAjC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOV,EAAP,KAAYa,EAAZ,KAGUC,EAAqB,WAEvB,OADuBf,EAAOE,EAAUD,GAyB5C,OACI,sBAAKN,UAAU,MAAf,UACI,uDAEJ,cAAC,EAAD,CAASc,MAAM,GAAf,SACQ,cAAC,EAAD,CAAiBnB,QAAS,CAAC,OAAQ,UAAW,OAC1CC,gBAvBQ,SAACyB,GACrB,OAAQA,EAAMC,OAAOC,MACjB,IAAK,OACDN,GAAQ,SAACO,GAAD,OAAeA,EAAY,KACnC,MACJ,IAAK,UACGN,GAAW,SAACM,GAAD,OAAeA,EAAY,KACtC,MACR,IAAK,MACOL,GAAO,SAACK,GAAD,OAAeA,EAAY,KAClC,MAEJ,QACQ,aAea,IAAzBJ,IACE,cAAC,EAAD,CAASN,MAAM,aAAf,SACM,cAAC,EAAD,CACIT,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLE,MAAOY,IACPX,oBAvCeJ,GAAQA,EAAOE,EAAUD,GAAQ,KAAKmB,QAAQ,OA0CvE,cAAE,EAAF,CAAeb,QAAQ,yBCxDzCc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.92608b9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"good\":\"Statistics_good__V18tf\",\"neutral\":\"Statistics_neutral__3Csd8\",\"bad\":\"Statistics_bad__1Gc-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3CFHG\",\"good\":\"FeedbackOptions_good__1SMd6 FeedbackOptions_button__3CFHG\",\"neutral\":\"FeedbackOptions_neutral__3i4B8 FeedbackOptions_button__3CFHG\",\"bad\":\"FeedbackOptions_bad__LlUGP FeedbackOptions_button__3CFHG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__1LKRZ\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\n\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (<>\r\n    {options.map(option => \r\n        <button type='button'\r\n            key={option}\r\n            className={styles.button}\r\n            onClick={() => onLeaveFeedback(option)}>\r\n            {option}\r\n        </button>\r\n    )} </>   \r\n);\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n     onLeaveFeedback: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p className={styles.good}>Good: {good}</p>\r\n            <p className={styles.neutral}>Neutral: {neutral}</p>\r\n            <p className={styles.bad}>Bad: {bad}</p>\r\n            \r\n            {(total !== 0) ?\r\n            <>\r\n                <p>Total feedback: {total}</p>\r\n                <p className={styles.good}>Positive feedbacks: {positivePercentage}%</p>\r\n                <h3>Thank you</h3>\r\n            </> : \"No feedback given\"}\r\n        </>\r\n    )\r\n};\r\n\r\nStatistics.defaultProps = {\r\n    total: null,\r\n    positivePercentage: null,\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.string.isRequired,\r\n  \r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Notification.module.css';\r\n\r\nconst Notification = ({ message }) => (\r\n    <h2 className={style.title}>{message}</h2>\r\n);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React from 'react';\nimport { useState } from \"react\";\nimport './App.css';\n\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Section from './components/FeedbackOptions';\nimport Statistics from \"./components/Statistics\";\nimport Notification from './components/Notification/Notification';\n\n\nexport default function App() {\nconst [good, setGood] = useState(0);\nconst [neutral, setNeutral] = useState(0);\nconst [bad, setBad] = useState(0);\n    \n    \n    const countTotalFeedback = () => {\n        const totalFeedbacks = good + neutral + bad;\n        return totalFeedbacks;\n    };\n    const countPositiveFeedbackPercentage = () => {\n        const percentageOfGoodFeedback = ((good / (good + neutral + bad)) * 100).toFixed(2);\n        return percentageOfGoodFeedback;\n    };\n    \n    const onLeaveFeedback = (event) => {\n        switch (event.target.name) {\n            case \"good\":\n                setGood((prevState) => prevState + 1);\n                break;\n            case \"neutral\":\n                    setNeutral((prevState) => prevState + 1);\n                    break;\n            case \"bad\":\n                        setBad((prevState) => prevState + 1);\n                        break;\n                    \n                    default:\n                            return;\n        }\n    };\n    \n    return (\n        <div className=\"App\">\n            <h1>Please leave feedback</h1>\n\n        <Section title=\"\">\n                <FeedbackOptions options={['good', 'neutral', 'bad']}\n                    onLeaveFeedback={onLeaveFeedback}>\n                    \n                    </FeedbackOptions>\n        </Section>\n            {\n                countTotalFeedback() !== 0\n                ? <Section title=\"Statistics\">\n                        <Statistics\n                            good={good}\n                            neutral={neutral}\n                            bad={bad}\n                            total={countTotalFeedback()}\n                            positivePercentage={countPositiveFeedbackPercentage()}\n                        />\n                </Section>\n                : < Notification message=\"No feedback given\" />\n            }\n    </div>\n    );\n}\n// class App extends Component {\n//     static defaultProps = {\n//         totalFeedbacks: 0,\n//         percentageOfGoodFeedback:0,\n//     }\n//     static propTypes = {\n//         totalFeedbacks: PropTypes.number,\n//         percentageOfGoodFeedback: PropTypes.number,\n//         good: PropTypes.number,\n//         bad: PropTypes.number,\n//         neutral: PropTypes.number,\n//         options: PropTypes.arrayOf(PropTypes.number),\n//     };\n//     state = {\n//         good: 0,\n//         neutral: 0,\n//         bad: 0,\n//     };\n\n//     onLeaveFeedback = (option) => {\n//         this.setState(prevState => {\n//             return ({\n//                 [option]: prevState[option] +1\n//             })\n//         })       \n//     }\n\n//     countTotalFeedback() {\n//         const { good, neutral, bad } = this.state;\n//         const totalFeedbacks = good + neutral + bad;\n//         return totalFeedbacks;\n//     }\n//     countPositiveFeedbackPercentage() {\n//         const { good, neutral, bad } = this.state;\n//         const percentageOfGoodFeedback = ((good / (good + neutral + bad)) * 100).toFixed(2);\n//         return percentageOfGoodFeedback;\n//     }\n\n//     render(totalFeedbacks) {\n//     const { good, neutral, bad } = this.state;\n//     return (\n//       <div className=\"App\">\n//           <h1>Please leave feedback</h1>  \n\n//         <Section title=\"\">\n//           <FeedbackOptions options={['good', 'neutral', 'bad']} onLeaveFeedback={this.onLeaveFeedback}></FeedbackOptions>\n//         </Section>\n//             {(totalFeedbacks !== 0)\n//                 ? <Section title=\"Statistics\">\n//                     <Statistics  good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} />\n//                 </Section>\n//                 : < Notification message=\"No feedback given\" />\n//             }\n//       </div>\n//     );\n//   }  \n// }\n\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}